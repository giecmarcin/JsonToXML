
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Feb 11 08:54:53 CET 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sat Feb 11 08:54:53 CET 2017
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\016\005\000\002\016\003\000" +
    "\002\010\011\000\002\007\011\000\002\007\010\000\002" +
    "\007\007\000\002\013\007\000\002\013\011\000\002\014" +
    "\007\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\017\003\000" +
    "\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\004\006\004\001\002\000\006\004\016\007" +
    "\014\001\002\000\004\002\001\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\006\007\056\012" +
    "\053\001\002\000\006\007\ufffd\012\ufffd\001\002\000\006" +
    "\007\ufff9\012\ufff9\001\002\000\006\007\ufffb\012\ufffb\001" +
    "\002\000\010\002\ufffe\011\ufffe\012\ufffe\001\002\000\006" +
    "\007\ufffc\012\ufffc\001\002\000\004\014\017\001\002\000" +
    "\004\004\020\001\002\000\004\005\021\001\002\000\016" +
    "\004\030\006\023\010\026\015\024\016\022\017\025\001" +
    "\002\000\006\007\ufff4\012\ufff4\001\002\000\006\004\016" +
    "\007\052\001\002\000\006\007\uffec\012\uffec\001\002\000" +
    "\010\007\uffeb\011\uffeb\012\uffeb\001\002\000\012\004\037" +
    "\006\004\015\033\017\025\001\002\000\006\007\ufff5\012" +
    "\ufff5\001\002\000\004\014\031\001\002\000\004\004\032" +
    "\001\002\000\006\007\ufff8\012\ufff8\001\002\000\006\011" +
    "\uffec\012\047\001\002\000\006\011\uffed\012\045\001\002" +
    "\000\004\011\044\001\002\000\004\011\uffee\001\002\000" +
    "\004\014\040\001\002\000\004\004\041\001\002\000\006" +
    "\011\ufff1\012\042\001\002\000\012\004\037\006\004\015" +
    "\033\017\025\001\002\000\004\011\ufff2\001\002\000\006" +
    "\007\ufff3\012\ufff3\001\002\000\012\004\037\006\004\015" +
    "\033\017\025\001\002\000\004\011\uffef\001\002\000\012" +
    "\004\037\006\004\015\033\017\025\001\002\000\004\011" +
    "\ufff0\001\002\000\006\007\054\012\053\001\002\000\006" +
    "\007\ufff6\012\ufff6\001\002\000\004\004\016\001\002\000" +
    "\006\007\ufff7\012\ufff7\001\002\000\006\007\ufffa\012\ufffa" +
    "\001\002\000\010\002\uffff\011\uffff\012\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\006\003\005\004\004\001\001\000\014\005" +
    "\011\007\010\010\014\013\012\016\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\026\001\001" +
    "\000\002\001\001\000\014\005\011\007\010\010\014\013" +
    "\012\016\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\033\014\034\017\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\033\014\042\017\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\033\014\045" +
    "\017\035\001\001\000\002\001\001\000\010\004\033\014" +
    "\047\017\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\054\007\010\010\014\013" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

    public void report_error(String message, Object info) 
    {           
        System.err.println(message);
    }
   

    public void report_fatal_error(String message, Object info) 
    {
        report_error(message, info);
        System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prostaZawartosc ::= PUSTYNULL 
            {
              Object RESULT = null;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new String("\t"); 
            
              CUP$parser$result = new Symbol(13/*prostaZawartosc*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prostaZawartosc ::= LICZBA 
            {
              Object RESULT = null;
		int wleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String w = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new String(w.toString());
            
              CUP$parser$result = new Symbol(13/*prostaZawartosc*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // wartosci ::= blokGlowny 
            {
              Object RESULT = null;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            	RESULT = new String(b.toString()); 
            
              CUP$parser$result = new Symbol(10/*wartosci*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // wartosci ::= prostaZawartosc 
            {
              Object RESULT = null;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				        RESULT = new String("\t"); 
            
              CUP$parser$result = new Symbol(10/*wartosci*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // wartosci ::= blokGlowny PRZECINEK wartosci 
            {
              Object RESULT = null;
		int wleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object w = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iwleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iwright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object iw = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String("<"+w.toString()+"/>"+iw.toString()); 
              CUP$parser$result = new Symbol(10/*wartosci*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // wartosci ::= LICZBA PRZECINEK wartosci 
            {
              Object RESULT = null;
		int wleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String w = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iwleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iwright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object iw = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String("<"+w.toString()+"/>"+iw.toString()); 
              CUP$parser$result = new Symbol(10/*wartosci*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // wartosci ::= CUDZYSLOW ID CUDZYSLOW 
            {
              Object RESULT = null;
		int wleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String w = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

             RESULT = new String("<"+w.toString()+"/>"); 
            
              CUP$parser$result = new Symbol(10/*wartosci*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // wartosci ::= CUDZYSLOW ID CUDZYSLOW PRZECINEK wartosci 
            {
              Object RESULT = null;
		int wleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String w = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iwleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iwright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object iw = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String("<"+w.toString()+"/>"+iw.toString()); 
              CUP$parser$result = new Symbol(10/*wartosci*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // zawartoscTablica ::= CUDZYSLOW ID CUDZYSLOW DWUKROPEK NAWIAS_KW_L wartosci NAWIAS_KW_P 
            {
              Object RESULT = null;
		int idKluczleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idKluczright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idKlucz = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = new String("<"
            +idKlucz.toString()+">"
            +w.toString()
            +"</"+idKlucz.toString()+">");
        
              CUP$parser$result = new Symbol(9/*zawartoscTablica*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // zawartoscTablica ::= CUDZYSLOW ID CUDZYSLOW DWUKROPEK TABWARTOSCI 
            {
              Object RESULT = null;
		int idKluczleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idKluczright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idKlucz = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String w = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        	Cutter cutter = new Cutter();
        	String koniec="";
        	if(w.toString().contains("{")){
        		koniec = cutter.cutText2(w.toString(), idKlucz);
        	}else{
        		koniec = cutter.cutText(w.toString(), idKlucz);
        	}
        	
        	RESULT = new String(koniec);
		
              CUP$parser$result = new Symbol(9/*zawartoscTablica*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloczek ::= CUDZYSLOW ID CUDZYSLOW DWUKROPEK prostaZawartosc 
            {
              Object RESULT = null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object l = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
          RESULT = new String("<"+i.toString()+">\n\t"+l.toString()+"\n</"+i.toString()+">");
        
              CUP$parser$result = new Symbol(5/*bloczek*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloczek ::= CUDZYSLOW ID CUDZYSLOW DWUKROPEK KLAMRA_OTW KLAMRA_ZAM 
            {
              Object RESULT = null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
          RESULT = new String("<"+i.toString()+">\n\t"+"\n</"+i.toString()+">");
        
              CUP$parser$result = new Symbol(5/*bloczek*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloczek ::= CUDZYSLOW ID CUDZYSLOW DWUKROPEK KLAMRA_OTW sekwencjaBlokow KLAMRA_ZAM 
            {
              Object RESULT = null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
          RESULT = new String("<"+i.toString()+">\n"+b.toString()+"\n</"+i.toString()+">");
        
              CUP$parser$result = new Symbol(5/*bloczek*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // zawartoscDalsza ::= CUDZYSLOW ID CUDZYSLOW DWUKROPEK CUDZYSLOW ID CUDZYSLOW 
            {
              Object RESULT = null;
		int idKluczleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idKluczright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idKlucz = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idWartoscleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idWartoscright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idWartosc = (String)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = new String("<"+idKlucz.toString()+">"
           + idWartosc.toString()
           +"</"+idKlucz.toString()+">"
           );
        
              CUP$parser$result = new Symbol(6/*zawartoscDalsza*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sekwencjaBlokow ::= blok 
            {
              Object RESULT = null;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object i = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(i.toString()); 
              CUP$parser$result = new Symbol(12/*sekwencjaBlokow*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sekwencjaBlokow ::= sekwencjaBlokow PRZECINEK blok 
            {
              Object RESULT = null;
		int sleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object i = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(s.toString()+i.toString()); 
              CUP$parser$result = new Symbol(12/*sekwencjaBlokow*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // blok ::= zawartoscTablica 
            {
              Object RESULT = null;
		int zTleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zTright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object zT = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(zT.toString());
              CUP$parser$result = new Symbol(3/*blok*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // blok ::= zawartoscDalsza 
            {
              Object RESULT = null;
		int zleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object z = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(z.toString()); 
              CUP$parser$result = new Symbol(3/*blok*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // blok ::= bloczek 
            {
              Object RESULT = null;
		int ipleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ipright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object ip = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(ip.toString()); 
              CUP$parser$result = new Symbol(3/*blok*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blokGlowny ::= KLAMRA_OTW KLAMRA_ZAM 
            {
              Object RESULT = null;
		 
          RESULT = new String("tekst");
        
              CUP$parser$result = new Symbol(2/*blokGlowny*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // blokGlowny ::= KLAMRA_OTW sekwencjaBlokow KLAMRA_ZAM 
            {
              Object RESULT = null;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
          RESULT = new String(b.toString());
        
              CUP$parser$result = new Symbol(2/*blokGlowny*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= plik EOF 
            {
              Object RESULT = null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new Symbol(0/*$START*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // plik ::= blokGlowny 
            {
              Object RESULT = null;
		int bleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
          System.out.print("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
          System.out.print(b.toString());
          RESULT = new String(b.toString());
        
              CUP$parser$result = new Symbol(1/*plik*/, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

